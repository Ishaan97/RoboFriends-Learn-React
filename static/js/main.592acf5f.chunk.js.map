{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","this","props","name","email","id","className","src","alt","React","Component","CardList","robots","map","user","idx","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","style","overflowY","border","height","children","ErrorBoundary","state","hasError","error","info","setState","App","onSearchChange","event","searchfield","target","value","filteredRobots","filter","robot","toLowerCase","includes","length","fetch","then","response","json","users","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"oOAqBeA,E,uKAdV,IAAD,EAC8BC,KAAKC,MAAxBC,EADX,EACWA,KAAMC,EADjB,EACiBA,MAAOC,EADxB,EACwBA,GACpB,OACI,yBAAKC,UAAU,uDACX,yBAAKC,IAAG,+BAA0BF,EAA1B,YAAwCG,IAAI,WACpD,6BACI,gCAAML,GACN,2BAAIC,S,GAZLK,IAAMC,WCmCVC,E,uKA9BV,IACUC,EAAUX,KAAKC,MAAfU,OAUP,OACI,6BAEQA,EAAOC,KAAI,SAACC,EAAMC,GACd,OAAQ,kBAAC,EAAD,CACRC,IAAKD,EACLV,GAAIO,EAAOG,GAAKV,GAChBF,KAAMS,EAAOG,GAAKZ,KAClBC,MAAOQ,EAAOG,GAAKX,gB,GAvBpBK,IAAMC,WCkBdO,E,uKAhBV,IACQC,EAAgBjB,KAAKC,MAArBgB,aACL,OACI,6BACI,2BACIZ,UAAU,mCACVa,KAAK,SACLC,YAAY,gBACZC,SAAUH,S,GAXNT,IAAMC,WCWfY,E,uKAPP,OACI,yBAAKC,MAAO,CAAEC,UAAU,SAAUC,OAAO,kBAAmBC,OAAO,UAC9DzB,KAAKC,MAAMyB,c,GANPlB,IAAMC,WCuBZkB,E,kDArBX,WAAY1B,GACX,IAAD,8BACI,cAAMA,IACD2B,MAAO,CACRC,UAAW,GAHnB,E,8DAOkBC,EAAOC,GAErB/B,KAAKgC,SAAS,CAACH,UAAU,M,+BAIzB,OAAI7B,KAAK4B,MAAMC,SAEJ,0DAEJ7B,KAAKC,MAAMyB,a,GApBElB,IAAMC,WC2DnBwB,G,wDAhDX,aACC,IAAD,8BACI,gBAOJC,eAAiB,SAACC,GAEf,EAAKH,SAAS,CAACI,YAAaD,EAAME,OAAOC,SARxC,EAAKV,MAAQ,CACTjB,OAAQ,GACRyB,YAAa,IAJrB,E,qDAeC,IAAD,EACkCpC,KAAK4B,MAA5BjB,EADX,EACWA,OAAQyB,EADnB,EACmBA,YACTG,EAAgB5B,EAAO6B,QAAO,SAAAC,GAChC,OAAOA,EAAMvC,KAAKwC,cAAcC,SAASP,EAAYM,kBAGzD,OAAK/B,EAAOiC,OAMR,yBAAKvC,UAAU,MACX,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWY,aAAcjB,KAAKkC,iBAC9B,kBAAC,EAAD,KACI,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAUvB,OAAQ4B,OATvB,yC,0CAiBd,IAAD,OACIM,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAEA,EAASC,UACxBF,MAAK,SAAAG,GAAK,OAAI,EAAKjB,SAAS,CAACrB,OAAOsC,W,GA9C3BzC,IAAMC,Y,MCCJyC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCRNC,IAASC,OACP,kBAAC,EAAD,MACCC,SAASC,eAAe,SDuHrB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBf,MAAK,SAAAgB,GACJA,EAAaC,gBAEdC,OAAM,SAAAlC,GACLmC,QAAQnC,MAAMA,EAAMoC,a","file":"static/js/main.592acf5f.chunk.js","sourcesContent":["import React from 'react';\n\nclass Card extends React.Component\n{\n    \n    \n    render()\n    {\n        const {name, email, id} = this.props;\n        return(\n            <div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\n                <img src={`https://robohash.org/${id}?200x200`} alt=\"robots\"/>\n                <div>\n                    <h2> {name}</h2>\n                    <p>{email}</p>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Card","import React from 'react'\nimport Card from './Card'\n\nclass CardList extends React.Component\n{\n    \n    render()\n    {\n        const {robots} = this.props;\n        // const cardArray = robots.map((user, idx)=>{\n        //     return (<Card \n        //     key={idx} \n        //     id={robots[idx].id} \n        //     name={robots[idx].name} \n        //     email={robots[idx].email}\n        //     />\n        //     );\n        // })\n        return(\n            <div>\n                {\n                    robots.map((user, idx)=>{\n                        return (<Card \n                        key={idx} \n                        id={robots[idx].id} \n                        name={robots[idx].name} \n                        email={robots[idx].email}\n                        />\n                        );\n                    })\n                }\n\n            </div>\n        );\n    }\n}\n\nexport default CardList;","import React from 'react'\n\nclass SearchBox extends React.Component\n{\n    render()\n    {\n        let {searchChange} = this.props;\n        return(\n            <div>\n                <input \n                    className=\"pa3 ba b--green bg-lightest-blue\"\n                    type=\"search\"\n                    placeholder=\"search robots\" \n                    onChange={searchChange}\n                />\n             </div>\n\n        );\n    }\n}\n\nexport default SearchBox;","import React from 'react';\n\nclass Scroll extends React.Component\n{\n    render()\n    {\n        return(\n            <div style={{ overflowY:'scroll', border:'1px solid black', height:'500px' }}>\n                {this.props.children}\n            </div>\n        );\n    }\n}\nexport default Scroll;","import React from 'react'\n\nclass ErrorBoundary extends React.Component\n{\n    constructor(props)\n    {\n        super(props);\n        this.state ={\n            hasError : false\n        }\n    }\n\n    componentDidCatch(error, info)\n    {\n        this.setState({hasError: true})\n    }\n    render()\n    {\n        if (this.state.hasError)\n        {\n            return <h1>Ooops !! That is not good.</h1>\n        }\n        return this.props.children;\n    }\n}\nexport default ErrorBoundary;","import React from 'react'\n\nimport CardList from '../components/CardList'\nimport SearchBox from '../components/SearchBox'\nimport Scroll from '../components/Scroll'\nimport ErrorBoundary from '../components/ErrorBoundary'\n\nimport './App.css'\n\n\n\nclass App extends React.Component\n{\n    constructor()\n    {\n        super();\n        this.state = {\n            robots: [],\n            searchfield: ''\n        }\n    }\n\n    onSearchChange = (event) =>\n    {\n       this.setState({searchfield: event.target.value})        \n    }\n\n\n    render()\n    {\n        const {robots, searchfield} = this.state;\n        const filteredRobots =robots.filter(robot =>{\n            return robot.name.toLowerCase().includes(searchfield.toLowerCase());\n        })\n\n        if (!robots.length)\n        {\n            return <h1>Loading</h1>\n        }\n\n        return (\n            <div className=\"tc\">\n                <h1 className=\"f1\">RoboFriends</h1>\n                <SearchBox searchChange={this.onSearchChange}/>\n                <Scroll>\n                    <ErrorBoundary>\n                        <CardList robots={filteredRobots}/>\n                    </ErrorBoundary>\n                    \n                </Scroll>\n            </div>\n        );\n    }\n    componentDidMount()\n    {\n        fetch('https://jsonplaceholder.typicode.com/users')\n        .then(response=>response.json())\n        .then(users => this.setState({robots:users}))\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport App from './containers/App'\n\nimport 'tachyons'\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <App/>\n  ,document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}